/**************************
***** Compiler Parameters *****
***************************
@P EffectName: MSAADepthResolverEffect
@P   - MSAAResolverParams.MSAASamples: 4
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 112]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    SvPosUnpack_id74 => MSAADepthResolverShader.SvPosUnpack
@C    TextureSizeLess1_id75 => MSAADepthResolverShader.TextureSizeLess1
***************************
******  Resources    ******
***************************
@R    InputTexture_id76 => MSAADepthResolverShader.InputTexture [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    MSAADepthResolverShader => 3ff63c097f7618a09abdc83b9fdcc6b1
@S    ShaderBase => 01e372056ff6c06edab8e988414a8f75
@S    ShaderBaseStream => 91c0ea8aae0a45ca00578a4084fa3607
@S    Texturing => 6605f68230266eff2bc8b4e8102ede6b
@S    Math => 395aa210901b9e0783594d1b4fb0a441
***************************
*****     Stages      *****
***************************
@G    Vertex => 0bea1380a0b79300f733eadfbb6472f6
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
//
// Initial variable locations:
//   v0.x <- __input__.Position_id73.x; v0.y <- __input__.Position_id73.y; v0.z <- __input__.Position_id73.z; v0.w <- __input__.Position_id73.w; 
//   o1.x <- <VSMain return value>.Position_id73.x; o1.y <- <VSMain return value>.Position_id73.y; o1.z <- <VSMain return value>.Position_id73.z; o1.w <- <VSMain return value>.Position_id73.w; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 154 "C:\Users\elektromeier\Desktop\VomAmt\VomAmtVR\lib\log\shader_MSAADepthResolverEffect_af0d53f5f6afa449650bdf572957bb50.hlsl"
mov o0.xyzw, v0.xyzw
mov o1.xyzw, v0.xyzw
ret 
// Approximately 3 instruction slots used
@G    Pixel => eaead897b3debc282eb1493533cdb884
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float4 SvPosUnpack_id74;           // Offset:   80 Size:    16
//   float2 TextureSizeLess1_id75;      // Offset:   96 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputTexture_id76                 texture  float4       2dMS4             t0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_resource_texture2dms(4) (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output oDepth
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.Position_id73.x; v1.y <- __input__.Position_id73.y; v1.z <- __input__.Position_id73.z; v1.w <- __input__.Position_id73.w; 
//   oDepth <- <PSMain return value>
//
#line 125 "C:\Users\elektromeier\Desktop\VomAmt\VomAmtVR\lib\log\shader_MSAADepthResolverEffect_af0d53f5f6afa449650bdf572957bb50.hlsl"
mad r0.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
ftoi r0.xy, r0.xyxx  // r0.x <- <ClipPosToUvPos_id16 return value>.x; r0.y <- <ClipPosToUvPos_id16 return value>.y

#line 133
mov r0.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r1.x, r0.xyww, t0.xyzw, l(0)  // r1.x <- resolvedDepth

#line 138
ldms_indexable(texture2dms)(float,float,float,float) r1.y, r0.xyww, t0.yxzw, l(1)  // r1.y <- sampleDepth

#line 139
min r1.x, r1.y, r1.x

#line 138
ldms_indexable(texture2dms)(float,float,float,float) r1.y, r0.xyww, t0.yxzw, l(2)
ldms_indexable(texture2dms)(float,float,float,float) r0.x, r0.xyzw, t0.xyzw, l(3)  // r0.x <- sampleDepth

#line 139
min r0.y, r1.y, r1.x  // r0.y <- resolvedDepth
min oDepth, r0.x, r0.y

#line 144
ret 
// Approximately 11 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float4 Position_id73;
    float Depth_id10;
};
struct PS_OUTPUT 
{
    float Depth_id10 : SV_Depth;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float4 Position_id73 : POSITION;
};
struct VS_STREAMS 
{
    float4 Position_id73;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float4 Position_id73 : POSITION;
};
struct VS_INPUT 
{
    float4 Position_id73 : POSITION;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float4 SvPosUnpack_id74;
    float2 TextureSizeLess1_id75;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
Texture2DMS<float4, 4> InputTexture_id76;
int2 ClipPosToUvPos_id16(float2 clipPos)
{
    return (int2)(clipPos * SvPosUnpack_id74.xy + SvPosUnpack_id74.zw);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.Position_id73 = __input__.Position_id73;
    float4 output = 0;
    int2 pixelPos = ClipPosToUvPos_id16(streams.Position_id73.xy);
    float resolvedDepth = InputTexture_id76.Load(pixelPos, 0).r;

    [unroll]
    for (int sampleIndex = 1; sampleIndex < 4; sampleIndex++)
    {
        float sampleDepth = InputTexture_id76.Load(pixelPos, sampleIndex).r;
        resolvedDepth = min(resolvedDepth, sampleDepth);
    }
    streams.Depth_id10 = resolvedDepth;
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.Depth_id10 = streams.Depth_id10;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id73 = __input__.Position_id73;
    streams.ShadingPosition_id0 = streams.Position_id73;
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.Position_id73 = streams.Position_id73;
    return __output__;
}
