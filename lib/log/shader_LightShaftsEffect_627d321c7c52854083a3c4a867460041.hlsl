/**************************
***** Compiler Parameters *****
***************************
@P EffectName: LightShaftsEffect
@P   - LightShaftsEffect.SampleCount: 64
@P LightShaftsEffect.LightGroup: mixin LightDirectionalGroup<8>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 480]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
@C    World_id87 => Transformation.World
@C    WorldInverse_id88 => Transformation.WorldInverse
@C    WorldInverseTranspose_id89 => Transformation.WorldInverseTranspose
@C    WorldView_id90 => Transformation.WorldView
@C    WorldViewInverse_id91 => Transformation.WorldViewInverse
@C    WorldViewProjection_id92 => Transformation.WorldViewProjection
@C    WorldScale_id93 => Transformation.WorldScale
@C    EyeMS_id94 => Transformation.EyeMS
cbuffer PerFrame [Size: 16]
@C    DensityFactor_id116 => LightShaftsShader.DensityFactor
cbuffer PerView [Size: 688]
@C    NearClipPlane_id74 => Camera.NearClipPlane
@C    FarClipPlane_id75 => Camera.FarClipPlane
@C    ZProjection_id76 => Camera.ZProjection
@C    ViewSize_id77 => Camera.ViewSize
@C    AspectRatio_id78 => Camera.AspectRatio
@C    View_id80 => Transformation.View
@C    ViewInverse_id81 => Transformation.ViewInverse
@C    Projection_id82 => Transformation.Projection
@C    ProjectionInverse_id83 => Transformation.ProjectionInverse
@C    ViewProjection_id84 => Transformation.ViewProjection
@C    ProjScreenRay_id85 => Transformation.ProjScreenRay
@C    Eye_id86 => Transformation.Eye
@C    _padding_PerView_Default => _padding_PerView_Default
@C    LightCount_id142 => DirectLightGroupPerView.LightCount.lightGroup
@C    Lights_id144 => LightDirectionalGroup.Lights.lightGroup
@C    _padding_PerView_Lighting => _padding_PerView_Lighting
***************************
******  Resources    ******
***************************
@R    DepthStencil_id79 => DepthBase.DepthStencil [Stage: None, Slot: (-1--1)]
@R    DepthStencil_id79 => DepthBase.DepthStencil [Stage: None, Slot: (-1--1)]
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    PointSampler_id43 => Texturing.PointSampler [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    DepthStencil_id79 => DepthBase.DepthStencil [Stage: Pixel, Slot: (2-2)]
@R    PerFrame => PerFrame [Stage: Pixel, Slot: (0-0)]
@R    PerView => PerView [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    LightShaftsShader => 3a3d2730af062ce6f6934598b0d07a73
@S    ImageEffectShader => 9b7cefba2dd674808bc791525995b495
@S    SpriteBase => 67b12f03dd9d34e76b6fcfb517afba8c
@S    ShaderBase => 01e372056ff6c06edab8e988414a8f75
@S    ShaderBaseStream => 91c0ea8aae0a45ca00578a4084fa3607
@S    Texturing => 6605f68230266eff2bc8b4e8102ede6b
@S    LightStream => 56c38b50a16fcb778c6eb6de86c307b5
@S    NormalStream => 901c352015317e9dff7f9aef777dc0c7
@S    DirectLightGroup => f340deae83183fca86789915a8f743c4
@S    ShadowGroup => 05578eeca4469db17e4a68e127e25a9f
@S    ShadowStream => 1adfec0b15bc9bf4d56e6be9b378a587
@S    TextureProjectionGroup => 48db91a31cbf2a9150d13547051adb85
@S    PositionStream4 => 978c413387a2cb385e61d6d096be6d21
@S    MaterialPixelStream => ba54d20041c3b54e07f20babb85f60bb
@S    MaterialStream => 5add3babbb46e617235ca05953485ed8
@S    IStreamInitializer => 092b60c9fe32ce985421fcfe20a11072
@S    PostEffectBoundingRay => 570cc38c69a127537a85d8c5e2376a2b
@S    DepthBase => 7a1f570f20bc1567e96828f78622fddb
@S    Camera => 68de88612bfb3b0a92e9082b82b993a9
@S    Transformation => 6c40fce14b58a620257103f7d0f4c093
@S    Math => 395aa210901b9e0783594d1b4fb0a441
@S    ComputeColorOut => 60638c2989a4b680d39df1f0a52b79cb
@S    ComputeColor => 4f34177c1ace328c0f5ae9b3e880dac2
@S    ComputeColorIn => 25f6914399f3be5bc8e3f0c0eaf9b7f1
@S    LightDirectionalGroup => ac53667662784343d421b00fac059f9a
@S    DirectLightGroupPerView => 8e17a5b08d2245289bb7a2dfb37a8dd8
@S    LightDirectional => a342c290a036eb9fbb9d93bdd7fa32de
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//   float4x4 World_id87;               // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverse_id88;        // Offset:  128 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id89;// Offset:  192 Size:    64 [unused]
//   float4x4 WorldView_id90;           // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewInverse_id91;    // Offset:  320 Size:    64 [unused]
//   float4x4 WorldViewProjection_id92; // Offset:  384 Size:    64 [unused]
//   float3 WorldScale_id93;            // Offset:  448 Size:    12 [unused]
//   float4 EyeMS_id94;                 // Offset:  464 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 299 "C:\Users\elektromeier\Desktop\VomAmt\VomAmtVR\lib\log\shader_LightShaftsEffect_627d321c7c52854083a3c4a867460041.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 303
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 7024ae9e3c363ce74469eda83f1492f0
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerFrame
// {
//
//   float DensityFactor_id116;         // Offset:    0 Size:     4
//
// }
//
// cbuffer PerView
// {
//
//   float NearClipPlane_id74;          // Offset:    0 Size:     4 [unused]
//      = 0x3f800000 
//   float FarClipPlane_id75;           // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   float2 ZProjection_id76;           // Offset:    8 Size:     8
//   float2 ViewSize_id77;              // Offset:   16 Size:     8 [unused]
//   float AspectRatio_id78;            // Offset:   24 Size:     4 [unused]
//   float4x4 View_id80;                // Offset:   32 Size:    64 [unused]
//   float4x4 ViewInverse_id81;         // Offset:   96 Size:    64 [unused]
//   float4x4 Projection_id82;          // Offset:  160 Size:    64 [unused]
//   float4x4 ProjectionInverse_id83;   // Offset:  224 Size:    64 [unused]
//   float4x4 ViewProjection_id84;      // Offset:  288 Size:    64 [unused]
//   float2 ProjScreenRay_id85;         // Offset:  352 Size:     8 [unused]
//   float4 Eye_id86;                   // Offset:  368 Size:    16 [unused]
//   float4 _padding_PerView_Default;   // Offset:  384 Size:    16 [unused]
//   int LightCount_id142;              // Offset:  400 Size:     4 [unused]
//   
//   struct DirectionalLightData
//   {
//       
//       float3 DirectionWS;            // Offset:  416
//       float3 Color;                  // Offset:  432
//
//   } Lights_id144[8];                 // Offset:  416 Size:   252 [unused]
//   float4 _padding_PerView_Lighting;  // Offset:  672 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PointSampler_id43                 sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// DepthStencil_id79                 texture  float4          2d             t2      1 
// PerFrame                          cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 247 "C:\Users\elektromeier\Desktop\VomAmt\VomAmtVR\lib\log\shader_LightShaftsEffect_627d321c7c52854083a3c4a867460041.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t0.xyzw, s0  // r0.x <- minmax.x; r0.y <- minmax.y

#line 251
lt r0.z, r0.y, l(1.000000)
if_nz r0.z

#line 248
  sample_indexable(texture2d)(float,float,float,float) r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), t1.yzxw, s0  // r0.z <- backsideMin

#line 249
  lt r0.z, r0.z, l(1.000000)

#line 250
  movc r0.x, r0.z, l(0), r0.x

#line 233
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)  // r0.z <- <GetZProjDepthFromUV_id4 return value>

#line 255
  min r0.y, r0.z, r0.y  // r0.y <- maxZ

#line 229
  add r0.xy, r0.xyxx, -cb1[0].zzzz
  div r0.xy, cb1[0].wwww, r0.xyxx  // r0.y <- <ComputeDepthFromZProj_id6 return value>

#line 271
  lt r0.z, r0.x, r0.y
  if_nz r0.z

#line 273
    add r0.x, -r0.x, r0.y
    mul r0.x, r0.x, cb0[0].x  // r0.x <- lightResult.x

#line 283
  else 
    mov r0.x, l(0)  // r0.x <- lightResult.x
  endif 

#line 285
  mov r0.xyz, r0.xxxx  // r0.x <- streams.ColorTarget_id2.x; r0.y <- streams.ColorTarget_id2.y; r0.z <- streams.ColorTarget_id2.z
else   // Prior locations: r0.x <- minmax.x; r0.y <- minmax.y

#line 289
  mov r0.xyz, l(0,0,0,0)  // r0.x <- streams.ColorTarget_id2.x; r0.y <- streams.ColorTarget_id2.y; r0.z <- streams.ColorTarget_id2.z
endif 

#line 292
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 24 instruction slots used
***************************
*************************/
const static int TSampleCount_id98 = 64;
const static int TMaxLightCount_id143 = 8;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float DepthVS_id97;
    float3 lightPositionWS_id99;
    float3 lightDirectionWS_id100;
    float3 lightColor_id101;
    float3 lightColorNdotL_id102;
    float3 lightSpecularColorNdotL_id103;
    float lightAttenuation_id104;
    float3 envLightDiffuseColor_id105;
    float3 envLightSpecularColor_id106;
    float lightDirectAmbientOcclusion_id108;
    float NdotL_id107;
    float3 normalWS_id112;
    float3 meshNormalWS_id110;
    float4 PositionWS_id96;
    float thicknessWS_id118;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct DirectionalLightData 
{
    float3 DirectionWS;
    float3 Color;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
    float4x4 World_id87;
    float4x4 WorldInverse_id88;
    float4x4 WorldInverseTranspose_id89;
    float4x4 WorldView_id90;
    float4x4 WorldViewInverse_id91;
    float4x4 WorldViewProjection_id92;
    float3 WorldScale_id93;
    float4 EyeMS_id94;
};
cbuffer PerFrame 
{
    float DensityFactor_id116;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
    float4x4 View_id80;
    float4x4 ViewInverse_id81;
    float4x4 Projection_id82;
    float4x4 ProjectionInverse_id83;
    float4x4 ViewProjection_id84;
    float2 ProjScreenRay_id85;
    float4 Eye_id86;
    float4 _padding_PerView_Default;
    int LightCount_id142;
    DirectionalLightData Lights_id144[TMaxLightCount_id143];
    float4 _padding_PerView_Lighting;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
Texture2D DepthStencil_id79;
float3 ComputeShadow_id17(inout PS_STREAMS streams, float3 position, int lightIndex)
{
    streams.thicknessWS_id118 = 0.0;
    return 1.0f;
}
float ComputeAttenuation_id16(float3 position, int lightIndex)
{
    return 1;
}
void ResetLightStream_id14(inout PS_STREAMS streams)
{
    streams.lightPositionWS_id99 = 0;
    streams.lightDirectionWS_id100 = 0;
    streams.lightColor_id101 = 0;
    streams.lightColorNdotL_id102 = 0;
    streams.lightSpecularColorNdotL_id103 = 0;
    streams.lightAttenuation_id104 = 1.0f;
    streams.envLightDiffuseColor_id105 = 0;
    streams.envLightSpecularColor_id106 = 0;
    streams.lightDirectAmbientOcclusion_id108 = 1.0f;
    streams.NdotL_id107 = 0;
}
float FastRandom_id33(uint n)
{
    n = (n << 13) ^ n;
    return float((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 2147483648.0;
}
int HashXYZ_id11(float3 input)
{
    return int(input.z * 313 + input.x * 1039 + input.y * 638359);
}
float3 ComputeColorIn_id15(inout PS_STREAMS streams, float4 positionWS, float stepSize, int stepIndex)
{
    ResetLightStream_id14(streams);
    streams.NdotL_id107 = 1;
    streams.normalWS_id112 = float3(0, 1, 0);
    streams.meshNormalWS_id110 = 0.0f;
    streams.PositionWS_id96 = 0.0f;
    float atten = ComputeAttenuation_id16(positionWS.xyz, 0);
    float3 shadowColor = ComputeShadow_id17(streams, positionWS.xyz, 0);
    float shadow = max(max(shadowColor.x, shadowColor.y), shadowColor.z);
    return DensityFactor_id116 * stepSize * shadow * atten;
}
float RayStepJitter_id12(float3 input, float stepSize)
{
    return stepSize * FastRandom_id33(HashXYZ_id11(input));
}
float ComputeDepthFromZProj_id6(float depth)
{
    return ZProjection_id76.y / (depth - ZProjection_id76.x);
}
float GetZProjDepthFromUV_id4(float2 uv)
{
    return DepthStencil_id79.SampleLevel(PointSampler_id43, uv, 0.0).x;
}
float4 ComputeFinalColor_id13(float3 lightAcc)
{
    return float4(lightAcc.xxx, 1.0f);
}
float3 ComputeColorOut_id9()
{
    return 0;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    float2 minmax = Texture0_id14.Sample(PointSampler_id43, streams.TexCoord_id62).xy;
    float backsideMin = Texture1_id16.Sample(PointSampler_id43, 0.0f).x;
    if (backsideMin < 1.0f)
        minmax.x = 0.0f;
    if (minmax.y < 1.0f)
    {
        float currentZ = GetZProjDepthFromUV_id4(streams.TexCoord_id62);
        float minZ = minmax.x;
        float maxZ = min(minmax.y, currentZ);
        float minDistance = ComputeDepthFromZProj_id6(minZ);
        float maxDistance = ComputeDepthFromZProj_id6(maxZ);
        float4 positionClipSpace = float4((1.0f - streams.TexCoord_id62.xy * 2.0f) * float2(-1.0f, 1.0f), maxZ, 1.0f);
        float4 positionVS = mul(positionClipSpace, ProjectionInverse_id83);
        positionVS.xyzw /= positionVS.w;
        float4 endingPosition = mul(positionVS, ViewInverse_id81);
        float3 endingPositionDelta = endingPosition.xyz - Eye_id86.xyz;
        float4 directionWS = float4(endingPositionDelta, 0.0f);
        directionWS = normalize(directionWS);
        float depthSlope = length(endingPositionDelta) / maxDistance;
        directionWS *= depthSlope;
        float stepRange = (maxDistance - minDistance);
        float stepSize = stepRange / (float)TSampleCount_id98;
        float3 lightResult = 0.0f;
        streams.DepthVS_id97 = minDistance;
        if (maxDistance > minDistance)
        {
            stepSize = (maxDistance - minDistance) / (float)TSampleCount_id98;
            float4 positionWS = endingPosition + (RayStepJitter_id12(positionVS.xyz, stepSize) - stepRange) * directionWS;
            streams.DepthVS_id97 = minDistance;

            for (int i = 0; i < TSampleCount_id98; i++)
            {
                lightResult += ComputeColorIn_id15(streams, positionWS, stepSize, i);
                positionWS += stepSize * directionWS;
                streams.DepthVS_id97 += stepSize;
            }
        }
        streams.ColorTarget_id2 = ComputeFinalColor_id13(lightResult);
    }
    else
    {
        streams.ColorTarget_id2 = ComputeFinalColor_id13(ComputeColorOut_id9());
    }
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
